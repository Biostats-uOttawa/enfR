---
editor: 
  markdown: 
    wrap: sentence
---

# Quelques notions de base sur R {#sec-basics-r}

Objectif de ce chapitre :

-   Cr√©er des objets et leur attribuer des valeurs.
-   Explorer les diff√©rents types d'objets et effectuer des op√©rations courantes sur ces objets.
-   Obtenir de l'aide en R et pr√©senter certaines ressources pour vous aider √† apprendre R.
-   Sauvegarder votre travail.
-   Utiliser et installer des paquets üì¶ pour √©tendre les capacit√©s de base de R.

## Consid√©rations importantes

Les captures d'√©crans pr√©sent√©es proviennent de RStudio mais tout est tr√®s similaire sur VSCode.

Avant de poursuivre, quelques points √† garder √† l'esprit tout au long de ce chapitre :

-   R est sensible √† la casse, c'est-√†-dire que `A` n'est pas la m√™me chose que `a` et `anova`, ce n'est pas `Anova`.

-   Tout ce qui suit un `#` est interpr√©t√© comme un commentaire et ignor√© par R.
    Ces *commentaires* doivent √™tre utilis√©s librement dans votre code, √† la fois pour votre propre information et pour aider vos collaborateurs.
    L'√©criture de commentaires est un peu un [art][comment] que vous ma√Ætriserez de mieux en mieux avec l'exp√©rience.

-   Dans R, les commandes sont g√©n√©ralement s√©par√©es par une nouvelle ligne.
    Vous pouvez √©galement utiliser un point-virgule `;` pour s√©parer vos commandes, mais nous vous le d√©conseillons fortement (rend le code tr√®s difficilement lisible).

-   Si une invite de continuation `+` appara√Æt dans la console apr√®s l'ex√©cution de votre code, cela signifie que vous n'avez pas termin√© votre code correctement.
    Cela se produit souvent lorsque vous oubliez de fermer une parenth√®se, ce qui est particuli√®rement fr√©quent lors que l'on utilise des parenth√®ses imbriqu√©es (`(((commande quelconque))`).
    Terminez simplement la commande sur la nouvelle ligne ou appuyez sur la touche "escape" de votre clavier (voir le point ci-dessous) et corrigez la faute de frappe.

-   En g√©n√©ral, R est assez tol√©rant vis-√†-vis des espaces suppl√©mentaires ins√©r√©s dans votre code, en fait l'utilisation d'espaces est activement encourag√©e.
    Cependant, les espaces ne doivent pas √™tre ins√©r√©s dans les op√©rateurs, c'est-√†-dire `<-` ne peut pas s'√©crire `< -` (notez l'espace).
    Voir le [guide de style][style-google] pour savoir o√π placer les espaces afin de rendre votre code plus lisible.

-   Si votre console se bloque et ne r√©pond plus apr√®s l'ex√©cution d'une commande, vous pouvez souvent vous sortir d'affaire en appuyant sur la touche "escape" (esc) de votre clavier ou en cliquant sur l'ic√¥ne d'arr√™t/stop en haut √† droite de votre console.
    Cela mettra fin √† la plupart des op√©rations en cours.

## Premi√®re √©tape dans la console

Dans le @sec-chap1, nous avons appris ce qu'√©tait la [console R](#sec-cons) la cr√©ation de scripts et de [Projets](#sec-rsprojs).
Nous avons √©galement vu comment √©crire votre code R dans un script, puis comment ins√©rer ce code dans la console pour qu'il s'ex√©cute (si vous avez oubli√© comment faire, revenez √† la section sur la console (-@sec-cons) pour vous rafra√Æchir la m√©moire).
Le fait d'√©crire votre code dans un script signifie que vous aurez un enregistrement permanent de tout ce que vous avez fait (√† condition de sauvegarder votre script) et vous permet √©galement de faire de nombreux commentaires pour vous rappeler ce que vous aviez fait (ou voulu faire) quand vous retournerez si votre code √† l'avenir.
Ainsi, pendant que vous travaillez sur ce chapitre, nous vous sugg√©rons de cr√©er un nouveau script (ou un [Projet](#sec-rsprojs) Rstudio) pour √©crire votre code au fur et √† mesure.

Comme nous l'avons vu au @sec-chap1, nous pouvons utiliser R de la m√™me mani√®re qu'une calculatrice.
Nous pouvons saisir une expression arithm√©tique dans notre script, puis l'envoyer dans la console et recevoir un r√©sultat.
Par exemple, si nous tapons l'expression `1 + 1` et que l'on ex√©cute cette ligne de code dans la console, on obtient la r√©ponse `2` (:smiley: !)

```{r}
#| echo: true
#| eval: true
1 + 1
```

Le `[1]` devant le r√©sultat indique que l'observation au d√©but de la ligne est la premi√®re.
Cela n'est pas tr√®s utile dans cet exemple, mais peut l'√™tre lors de l'impression de r√©sultats sur plusieurs lignes (nous en verrons un exemple ci-dessous).
Les autres op√©rateurs arithm√©tiques √©vidents sont `-`, `*`, `/` pour la soustraction, la multiplication et la division respectivement.
Pour la multiplication de la matrice, l'op√©rateur est `%*%`.

R suit la convention math√©matique habituelle de l'[ordre des op√©rations][op-prec].
Par exemple, l'expression `2 + 3 * 4` est interpr√©t√©e comme ayant la valeur `2 + (3 * 4) = 14` et non `(2 + 3) * 4 = 20`.
Il existe un grand nombre de fonctions math√©matiques dans R, dont les plus utiles sont les suivantes : `log()`, `log10()`, `exp()`, `sqrt()`.

```{r}
#| echo: true
#| eval: true
log(1) # logarithme en base e
log10(1) # logarithme en base 10
exp(1) # antilog naturel, fonction exponentielle
sqrt(4) # racine carr√©e
4^2 # 4 puissance 2
pi # pas une fonction mais utile
```

Il est important de comprendre que lorsque vous ex√©cutez un code comme nous l'avons fait ci-dessus, le r√©sultat du code (ou **valeur**) n'est affich√© que dans la console.
Bien que cela puisse parfois √™tre utile, il est g√©n√©ralement beaucoup plus pratique de stocker la ou les valeurs dans un **objet**.

## Objets en R

Au c≈ìur de presque tout ce que vous ferez (ou ferez probablement) en R se trouve le concept selon lequel tout en R est un [objet][chambers].
Ces objets peuvent √™tre pratiquement n'importe quoi, d'un simple nombre ou d'une cha√Æne de caract√®res (comme un mot) √† des structures tr√®s complexes comme la sortie d'un graphique, un r√©sum√© de votre analyse statistique ou un ensemble de commandes R effectuant une t√¢che sp√©cifique.
Pour comprendre R, il est essentiel de savoir comment cr√©er des objets et leur attribuer des valeurs.

### Cr√©ation d'objets {#sec-r-objs}

Pour cr√©er un objet, il suffit de lui donner un nom.
Nous pouvons ensuite attribuer une valeur √† cet objet √† l'aide d'un *op√©rateur d'affectation* `<-` (parfois appel√© *op√©rateur d'obtention*).
L'op√©rateur d'affectation est un symbole composite compos√© d'un symbole "moins que" `<` et d'un trait d'union `-`

> raccourci clavier : "option" + "-" sur Mac ; "alt" + "-" sur Windows.

```{r}
#| echo: true
#| eval: true
mon_obj <- 32
```

Dans le code ci-dessus, nous avons cr√©√© un objet appel√© `mon_obj` et lui avons attribu√© la valeur num√©rique `32` √† l'aide de l'op√©rateur d'affectation (dans notre t√™te, nous lisons toujours cela comme '*mon_obj est 32*').
Vous pouvez √©galement utiliser `=` √† la place de `<-` pour assigner des valeurs, mais c'est une mauvaise pratique car cela peut entra√Æner des confusions plus tard quand vous programmerez en `R` (voir @sec-prog-r) donc nous vous d√©conseillons d'utiliser cette notation.

Pour afficher la valeur de l'objet, il suffit de taper son nom.

```{r}
#| echo: true
#| eval: true
mon_obj
```

Maintenant que nous avons cr√©√© cet objet, R le conna√Æt et en gardera la trace pendant la session R en cours.
Tous les objets que vous cr√©ez sont stock√©s dans l'espace de travail actuel et vous pouvez visualiser tous les objets de votre espace de travail dans RStudio en cliquant sur l'onglet "Environnement" dans le volet sup√©rieur droit.

```{r}
#| label: fig-rstudio_env
#| fig-cap: Onglet Environnement RStudio
#| echo: false
#| out-width: 75%
#| fig-align: center
knitr::include_graphics(path = "images/basic/rs_env-fr.png")
```

Si vous cliquez sur la fl√®che vers le bas de l'ic√¥ne "List" (Liste) dans le m√™me volet et que vous passez √† l'affichage "Grid" (Grille), RStudio vous pr√©sentera un r√©sum√© des objets, y compris le type ("numeric" (num√©rique) - c'est un nombre), la longueur (une seule valeur dans cet objet), sa taille "physique" et sa valeur (32 dans ce cas).
Dans VSCode, allez sur le panneau d'extension R et vous obtiendrez les m√™mes informations.

```{r}
#| label: fig-rstudio_env2
#| fig-cap: Onglet Environnement RStudio au format grille
#| echo: false
#| out-width: 75%
#| fig-align: center
knitr::include_graphics(path = "images/basic/rs_env2-fr.png")
```

Il existe de nombreux types de valeurs que vous pouvez attribuer √† un objet.
Par exemple

```{r}
#| echo: true
#| eval: true
mon_obj2 <- "R c'est trop bien"
```

Nous avons cr√©√© un objet appel√© `mon_obj2` et lui avons attribu√© la valeur `R c'est trop bien` qui est une cha√Æne de caract√®res.
Remarquez que nous avons mis la cha√Æne de caract√®res entre guillemets.
Si vous oubliez d'utiliser les guillemets, vous recevrez un message d'erreur.

Notre espace de travail contient maintenant les deux objets que nous avons cr√©√©s jusqu'√† pr√©sent avec `mon_obj2` de type "character" (caract√®re).

```{r}
#| label: fig-rstudio_env3
#| fig-cap: Onglet Environnement RStudio avec mon_obj2 de type caract√®re
#| echo: false
#| out-width: 75%
#| fig-align: center
knitr::include_graphics(path = "images/basic/rs_env3-fr.png")
```

Pour modifier la valeur d'un objet existant, il suffit de lui r√©attribuer une nouvelle valeur.
Par exemple, pour modifier la valeur de `mon_obj2` de `"R c'est trop bien"` au nombre `1024`

```{r}
#| echo: true
#| eval: true
mon_obj2 <- 1024
```

Remarquez que le type est devenu num√©rique et que la valeur est pass√©e √† 1024 dans l'environnement.

```{r}
#| label: fig-rstudio_env4
#| fig-cap: Onglet Environnement RStudio avec mon_obj2 mis-√†-jours en num√©rique
#| echo: false
#| out-width: 75%
#| fig-align: center
knitr::include_graphics(path = "images/basic/rs_env4-fr.png")
```

Une fois que nous avons cr√©√© plusieurs objets, nous pouvons faire des choses avec.
Par exemple, le code suivant cr√©e un nouvel objet `mon_obj3` et lui assigne la valeur de `mon_obj` ajout√© √† `mon_obj2` soit 1056 (32 + 1024 = 1056).

```{r}
#| echo: true
#| eval: true
mon_obj3 <- mon_obj + mon_obj2
mon_obj3
```

Remarquez que pour afficher la valeur de `mon_obj3` nous devons √©galement √©crire le nom de l'objet.
Le code ci-dessus fonctionne parce que les valeurs de `mon_obj` et `mon_obj2` sont num√©riques (donc des nombres).
Si vous essayez de faire √ßa avec des objets dont les valeurs sont des caract√®res (**classe character**), vous recevrez une erreur

```{r}
#| echo: true
#| eval: false
char_obj <- "hello"
char_obj2 <- "world!"
char_obj3 <- char_obj + char_obj2
# Error in char_obj+char_obj2:non-numeric argument to binary operator
```

Le message d'erreur vous indique que l'un ou les deux objets `char_obj` et `char_obj2` n'est pas un nombre et ne peut donc pas √™tre additionn√©.

Lorsque vous commencez √† apprendre R, la gestion des erreurs et des avertissements peut √™tre frustrante car ils sont souvent difficiles √† comprendre (qu'est-ce qu'un [*argument*][r_arg] ? qu'est-ce qu'un [*op√©rateur binaire*][bin_op] ?).
Une fa√ßon de trouver plus d'informations sur une erreur particuli√®re est de rechercher une version g√©n√©ralis√©e du message d'erreur.
Pour l'erreur ci-dessus, essayez de rechercher [*'non-numeric argument to binary operator error + r'*][non_num_err] ou m√™me [*'common r error messages'*][com_err].

Un autre message d'erreur que vous obtiendrez assez souvent lorsque vous commencerez √† utiliser R est `Error : object 'XXX' not found` (erreur : objet 'XXX' non trouv√©).
A titre d'exemple, regardez le code ci-dessous

``` r
mon_obj <- 48
mon_obj4 <- mon_obj + no_obj
# Error: object 'no_obj' not found
```

R renvoie un message d'erreur parce que nous n'avons pas encore cr√©√© (d√©fini) l'objet `no_obj`.
Un autre indice qu'il y a un probl√®me avec ce code est que, si vous v√©rifiez votre environnement, vous verrez que l'objet `mon_obj4` n'a pas √©t√© cr√©√©.

### Nommer les objets

Nommer vos objets est l'une des choses les plus difficiles que vous ferez dans R.
Id√©alement, les noms de vos objets devraient √™tre courts et informatifs, ce qui n'est pas toujours facile.
Si vous devez cr√©er des objets avec plusieurs mots dans leur nom, utilisez un trait de soulignement `_` ou un point `.` entre les mots ou mettez les diff√©rents mots en majuscules.
Nous pr√©f√©rons le format soulign√© `_` et n'incluons jamais de majuscules dans les noms (appel√© [*snake_case*][snake]).

``` r
r√©sum√©_sortie <- "mon analyse" # recommand√© #
r√©sum√©.sortie <- "mon analyse"
r√©sum√©Sortie <- "mon analyse"
```

Il y a √©galement quelques limitations lorsqu'il s'agit de donner des noms aux objets.
Un nom d'objet ne peut pas commencer par un chiffre ou un point suivi d'un chiffre (ex. `2ma_variable` ou `.2ma_variable`).
Vous devez √©galement √©viter d'utiliser des caract√®res non alphanum√©riques dans vos noms d'objets (i.e. &, \^, /, ! etc).
De plus, assurez-vous de ne pas nommer vos objets avec des mots r√©serv√©s (i.e. `TRUE`, `NA`) et ce n'est jamais une bonne id√©e de donner √† votre objet le m√™me nom qu'une fonction int√©gr√©e.
Une fonction qui revient plus souvent qu'on ne peut s'en souvenir est :

``` r
data <- read.table("monfichierdedon√©es", header = TRUE)
```

Oui, `data()` est une fonction de R qui permet de charger ou de lister les ensembles de donn√©es disponibles dans les paquets.

## Utilisation de fonctions dans R {#sec-funcs}

Jusqu'√† pr√©sent, nous avons cr√©√© des objets simples en assignant directement une valeur unique √† un objet.
Il est tr√®s probable que vous souhaitiez bient√¥t cr√©er des objets plus compliqu√©s au fur et √† mesure que vous aurez de l'exp√©rience sur R et que la complexit√© de vos t√¢ches augmente.
Heureusement, R dispose d'une multitude de fonctions pour vous aider √† le faire.
Vous pouvez consid√©rer une fonction comme *un objet qui contient une s√©rie d'instructions pour effectuer une t√¢che sp√©cifique*.
L'installation de base de R est livr√©e avec de nombreuses fonctions d√©j√† d√©finies ou vous pouvez augmenter la puissance de R en installant l'un des 10 000 [paquets](@sec-packages) actuellement disponibles.
Une fois que vous aurez acquis un peu plus d'exp√©rience dans l'utilisation de R, vous voudrez peut-√™tre d√©finir vos propres fonctions pour effectuer des t√¢ches sp√©cifiques √† vos objectifs (plus d'informations √† ce sujet dans @sec-prog-r).

La premi√®re fonction que nous allons d√©couvrir est la fonction `c()`.
La fonction `c()` est l'abr√©viation de concat√©ner et nous l'utilisons pour joindre une s√©rie de valeurs et les stocker dans une structure de donn√©es appel√©e [**vecteur**][vector] (plus d'informations sur les vecteurs dans @sec-data-r).

```{r}
#| echo: true
#| eval: true
mon_vec <- c(2, 3, 1, 6, 4, 3, 3, 7)
```

Dans le code ci-dessus, nous avons cr√©√© un objet appel√© `mon_vec` et lui avons assign√© une valeur en utilisant la fonction `c()`.
Il y a quelques points tr√®s importants √† noter ici.
Premi√®rement, lorsque vous utilisez une fonction dans R, le nom de la fonction est **toujours** suivi d'une paire de parenth√®ses rondes `()`, m√™me s'il n'y a rien entre les parenth√®ses.
Deuxi√®mement, les arguments d'une fonction sont plac√©s √† l'int√©rieur des parenth√®ses rondes `()` et sont s√©par√©s par des virgules `,`.
Vous pouvez consid√©rer un argument comme un moyen de personnaliser l'utilisation ou le comportement d'une fonction.
Dans l'exemple ci-dessus, les arguments sont les nombres que nous voulons concat√©ner.
Enfin, l'une des choses les plus d√©licates lorsque vous commencez √† utiliser R est de savoir quelle fonction utiliser pour une t√¢che particuli√®re et comment l'utiliser.
Heureusement, chaque fonction est toujours associ√©e √† un document d'aide qui explique comment utiliser la fonction (plus d'informations √† ce sujet plus tard @sec-help) et une recherche rapide sur le web peut √©galement vous aider.

Pour examiner la valeur de notre nouvel objet, nous pouvons simplement taper le nom de l'objet comme nous l'avons fait pr√©c√©demment

```{r}
#| echo: true
#| eval: true
mon_vec
```

Maintenant que nous avons cr√©√© un vecteur, nous pouvons utiliser d'autres fonctions pour faire des choses utiles avec cet objet.
Par exemple, nous pouvons calculer la moyenne, la variance, l'√©cart-type et le nombre d'√©l√©ments de notre vecteur en utilisant les fonctions `mean()`, `var()`, `sd()` et `length()`.

```{r}
#| echo: true
#| eval: true
mean(mon_vec) # renvoie la moyenne de mon_vec
var(mon_vec) # renvoie la variance de mon_vec
sd(mon_vec) # renvoie l'√©cart-type de mon_vec
length(mon_vec) # renvoie le nombre d'√©l√©ments dnas mon_vec
```

Si nous voulons utiliser l'une de ces valeurs plus tard dans notre analyse, il nous suffit d'affecter la valeur obtenue √† un autre objet.

```{r}
#| echo: true
#| eval: true
moyenne_vec <- mean(mon_vec) # renvoie la moyenne de mon_vec
moyenne_vec
```

Il peut parfois √™tre utile de cr√©er un vecteur contenant une s√©quence r√©guli√®re de valeurs par pas de un.
Dans ce cas, nous pouvons utiliser un raccourci en utilisant le symbole `:`.

```{r}
#| echo: true
#| eval: true
ma_seq <- 1:10 # cr√©er une s√©quence r√©guli√®re
ma_seq
ma_seq2 <- 10:1 # en ordre d√©croissant
ma_seq2
```

D'autres fonctions utiles pour g√©n√©rer des vecteurs de s√©quences sont `seq()` et `rep()`.
Par exemple, pour g√©n√©rer une s√©quence de 1 √† 5 par pas de 0,5 :

```{r}
#| echo: true
#| eval: true
ma_seq2 <- seq(from = 1, to = 5, by = 0.5)
ma_seq2
```

Ici, nous avons utilis√© les arguments `from =` et `to =` pour d√©finir les limites de la s√©quence et l'argument `by =` pour sp√©cifier l'incr√©ment (les pas) de la s√©quence.
Jouez avec d'autres valeurs pour ces arguments afin de voir leur effet.

L'argument `rep()` vous permet de r√©pliquer (r√©p√©ter) des valeurs un certain nombre de fois.
Pour r√©p√©ter la valeur '2', 10 fois :

```{r}
#| echo: true
#| eval: true
ma_seq3 <- rep(2, times = 10) # r√©p√®te '2', 10 fois
ma_seq3
```

Vous pouvez √©galement r√©p√©ter des valeurs non num√©riques :

```{r}
#| echo: true
#| eval: true
ma_seq4 <- rep("abc", times = 3) # r√©p√®te ‚Äòabc' 3 fois
ma_seq4
```

ou chaque √©l√©ment d'une s√©rie :

```{r}
#| echo: true
#| eval: true
ma_seq5 <- rep(1:5, times = 3) # r√©p√®te la s√©rie de '1' √† '5', 3 fois
ma_seq5
```

ou des √©l√©ments d'une s√©rie :

```{r}
#| echo: true
#| eval: true
ma_seq6 <- rep(1:5, each = 3) # r√©p√®te chaque √©l√©ment de la s√©rie 3 fois
ma_seq6
```

On peut aussi r√©p√©ter une s√©rie non s√©quentielle :

```{r}
#| echo: true
#| eval: true
ma_seq7 <- rep(c(3, 1, 10, 7), each = 3) # r√©p√®te chaque √©l√©ment de la s√©rie 3 fois
ma_seq7
```

Notez dans le code ci-dessus comment nous avons utilis√© la fonction `c()` √† l'int√©rieur de la fonction `rep()`.
L'imbrication de fonctions nous permet de construire des commandes assez complexes √† l'int√©rieur d'une seule ligne de code et est une pratique tr√®s courante dans l'utilisation de R.
Cependant, il faut faire attention car trop de fonctions imbriqu√©es peuvent rendre votre code difficile √† comprendre pour les autres (et pour vous-m√™me dans le futur !).
Nous pourrions r√©√©crire le code ci-dessus pour s√©parer explicitement les deux √©tapes de la g√©n√©ration de notre vecteur.
L'une ou l'autre approche donnera le m√™me r√©sultat, il vous suffit d'utiliser votre propre jugement pour d√©terminer laquelle est la plus lisible.

```{r}
#| echo: true
#| eval: true
vec_int <- c(3, 1, 10, 7)
ma_seq7 <- rep(vec_int, each = 3) # r√©p√®te chaque √©l√©ment de la s√©rie, 3 fois
ma_seq7
```

## Travailler avec des vecteurs {#sec-vectors}

Manipuler, r√©sumer et trier des donn√©es √† l'aide de R est une comp√©tence importante √† ma√Ætriser, mais que de nombreuses personnes trouvent un peu d√©routante au d√©but.
Nous allons voir ici quelques exemples simples utilisant des vecteurs pour illustrer certains concepts importants, mais nous d√©velopperons cela plus en d√©tail dans @sec-data-r o√π nous verrons des structures de donn√©es plus compliqu√©es (et plus utiles).

### Extraction d'√©l√©ments

Pour extraire (ou indexer ou souscrire) une ou plusieurs valeurs (plus g√©n√©ralement appel√©es √©l√©ments) d'un vecteur, nous utilisons les crochets `[ ]`.
L'approche g√©n√©rale consiste √† nommer l'objet √† extraire, puis √©crire l'indice de l'√©l√©ment √† extraire dans les crochets.
Cet indice peut √™tre une position ou le r√©sultat d'un test logique.

#### Indice de position {.unnumbered}

Pour extraire des √©l√©ments en fonction de leur position, il suffit d'√©crire la position √† l'int√©rieur des crochets `[ ]`.
Par exemple, pour extraire la 3e valeur de `mon_vec` :

```{r}
#| echo: true
#| eval: true
mon_vec # rappelons-nous √† quoi mon_vec ressemble
mon_vec[3] # extrait la 3e valeur

# si vous voulez stocker cette valeur dans un autre objet
val_3 <- mon_vec[3]
val_3
```

Notez que l'indice de position commence √† 1 et non √† 0 comme dans d'autres langages de programmation (i.e. Python).

Nous pouvons √©galement extraire plusieurs valeurs en utilisant la fonction `c()` √† l'int√©rieur des crochets.
Ici, nous extrayons le 1^er^, le 5^e^, le 6^e^ et le 8^e^ √©l√©ment de l'objet `mon_vec` :

```{r}
#| echo: true
#| eval: true
mon_vec[c(1, 5, 6, 8)]
```

Nous pouvons √©galement extraire une plage de valeurs √† l'aide de la fonction `:`.
Pour extraire du 3^e^ au 8^e^ √©l√©ment :

```{r}
#| echo: true
#| eval: true
mon_vec[3:8]
```

#### Indice logique {#sec-logical-index}

Une autre fa√ßon tr√®s utile d'extraire des donn√©es d'un vecteur est d'utiliser une expression logique comme indice.
Par exemple, pour extraire tous les √©l√©ments dont la **valeur** est sup√©rieure √† 4 dans le vecteur `mon_vec` :

```{r}
#| echo: true
#| eval: true
mon_vec[mon_vec > 4]
```

Ici, l'expression logique est `mon_vec > 4` et R n'extraira que les √©l√©ments qui satisfont √† cette condition logique.
Comment cela fonctionne-t-il r√©ellement ?
Si nous regardons la sortie de l'expression logique sans les crochets, vous pouvez voir que R renvoie un vecteur contenant soit `TRUE` soit `FALSE` qui indique si la condition logique est remplie pour chaque √©l√©ment.
Dans ce cas, seuls les √©l√©ments en 4^e^ et 8^e^ position renvoient un `TRUE` car leur valeur est sup√©rieure √† 4.

```{r}
#| echo: true
#| eval: true
mon_vec > 4
```

Ainsi, ce que R fait en r√©alit√© sous le capot est √©quivalent √† :

```{r}
#| echo: true
#| eval: true
mon_vec[c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE)]
```

et seuls les √©l√©ments qui sont `TRUE` seront extraits.

En plus de `<` et `>` vous pouvez √©galement utiliser des op√©rateurs composites pour augmenter la complexit√© de vos expressions.
Par exemple, l'expression "sup√©rieur ou √©gal √†" est : `>=`.
Pour v√©rifier si une valeur est √©gale √† une autre, nous devons utiliser un double symbole √©gal `==` et pour v√©rifier si une valeur est diff√©rente de, nous utilisons le symbole `!=` (le symbole `!` signifie "pas").

```{r}
#| echo: true
#| eval: true
mon_vec[mon_vec >= 4] # valeurs sup√©rieures ou √©gales √† 4
mon_vec[mon_vec < 4] # valeurs inf√©rieures √† 4
mon_vec[mon_vec <= 4] # valeurs inf√©rieures ou √©gales √† 4
mon_vec[mon_vec == 4] # valeurs √©gales √† 4
mon_vec[mon_vec != 4] # valeurs pas √©gales √† 4
```

Nous pouvons √©galement combiner plusieurs expressions logiques √† l'aide d'[expressions bool√©ennes][boolean].
Dans R, l'√©l√©ment `&` signifie ET et le symbole `|` signifie OU.
Par exemple, pour extraire des valeurs dans `mon_vec` qui sont inf√©rieures √† 6 ET sup√©rieures √† 2 :

```{r}
#| echo: true
#| eval: true
val26 <- mon_vec[mon_vec < 6 & mon_vec > 2]
val26
```

ou extraire des valeurs dans `mon_vec` qui sont sup√©rieures √† 6 OU inf√©rieures √† 3 :

```{r}
#| echo: true
#| eval: true
val63 <- mon_vec[mon_vec > 6 | mon_vec < 3]
val63
```

### Remplacement d'√©l√©ments

Nous pouvons modifier les valeurs de certains √©l√©ments d'un vecteur √† l'aide des crochets `[ ]` en combinaison avec l'op√©rateur d'affectation `<-`.
Par exemple, pour remplacer la 4^e^ valeur de `mon_vec` de `6` √† `500` :

```{r}
#| echo: true
#| eval: true
mon_vec[4] <- 500
mon_vec
```

Nous pouvons √©galement remplacer plusieurs valeurs ou m√™me remplacer des valeurs sur la base d'une expression logique :

```{r}
#| echo: true
#| eval: true
# remplacer les 6e et 7e √©l√©ments par 100
mon_vec[c(6, 7)] <- 100
mon_vec

# remplacer les √©l√©ments inf√©rieurs ou √©gaux √† 4 par 1000
mon_vec[mon_vec <= 4] <- 1000
mon_vec
```

### Ordonner les √©l√©ments {#sec-vec-ord}

Outre l'extraction d'√©l√©ments particuliers d'un vecteur, il est √©galement possible d'ordonner les valeurs contenues dans un vecteur.
Pour trier les valeurs de la plus petite √† la plus grande, nous pouvons utiliser la fonction `sort()` :

```{r}
#| echo: true
#| eval: true
vec_tri√© <- sort(mon_vec)
vec_tri√©
```

Pour inverser le tri, du plus √©lev√© au plus bas, nous pouvons soit inclure l'option `decreasing = TRUE` lors de l'utilisation de la fonction `sort()` :

```{r}
#| echo: true
#| eval: true
vec_tri√©2 <- sort(mon_vec, decreasing = TRUE)
vec_tri√©2
```

soit trier d'abord le vecteur √† l'aide de la fonction `sort()` puis l'inverser √† l'aide de la fonction `rev()`.
Il s'agit l√† d'un autre exemple d'imbrication d'une fonction dans une autre fonction :

```{r}
#| echo: true
#| eval: true
vec_tri√©3 <- rev(sort(mon_vec))
vec_tri√©3
```

Bien qu'il soit amusant de trier un seul vecteur, il serait peut-√™tre plus utile de trier un vecteur en fonction des valeurs d'un autre vecteur.
Pour ce faire, nous devons utiliser la fonction `order()` en combinaison avec `[ ]`.
Pour le d√©montrer, cr√©ons un vecteur appel√© `taille` contenant la taille de 5 personnes diff√©rentes et un autre vecteur appel√© `p.noms` contenant les noms de ces personnes (Joanna mesure 180 cm, Charlotte mesure 155 cm, etc.)

```{r}
#| echo: true
#| eval: true
taille <- c(180, 155, 160, 167, 181)
taille

p.noms <- c("Joanna", "Charlotte", "Helen", "Karen", "Amy")
p.noms
```

Notre objectif est de classer les personnes dans `p.noms` dans l'ordre croissant de leur `taille`.
La premi√®re chose que nous allons faire est d'utiliser la fonction `order()` avec le vecteur `taille` pour cr√©er un vecteur appel√© `taille_ord`

```{r}
#| echo: true
#| eval: true
taille_ord <- order(taille)
taille_ord
```

OK, que se passe-t-il ici ?
La premi√®re valeur, `2`(n'oubliez pas d'ignorer `[1]`) doit √™tre lue comme "la plus petite valeur de `taille` est le deuxi√®me √©l√©ment du vecteur `taille`".
Si nous le v√©rifions en regardant le vecteur `taille` ci-dessus, nous pouvons voir que le 2^e^ √©l√©ment a une valeur de 155, ce qui est la plus petite valeur.
La deuxi√®me valeur la plus petite du vecteur `taille` est la 3^e^ ce qui, apr√®s v√©rification, donne 160 et ainsi de suite.
La plus grande valeur de `taille` est la `5`^e^ qui vaut 181.
Maintenant que nous avons le vecteur des indices de position des tailles par ordre croissant (`taille_ord`), nous pouvons extraire ces valeurs de notre vecteur `p.noms` dans cet ordre

```{r}
#| echo: true
#| eval: true
noms_ord <- p.noms[taille_ord]
noms_ord
```

Vous vous demandez probablement √† quoi cela peut bien servir.
Imaginons que vous disposiez d'un jeu de donn√©es contenant deux colonnes et que vous souhaitiez trier chacune d'entre elles.
Si vous utilisez simplement `sort()` pour trier chaque colonne s√©par√©ment, les valeurs de chaque colonne seront dissoci√©es les unes des autres.
En utilisant `order()` sur une colonne, un vecteur d'indices de position est cr√©√© √† partir des valeurs de la colonne dans l'ordre croissant.
Ce vecteur peut √™tre utilis√© sur la deuxi√®me colonne, en tant qu'indice d'√©l√©ments qui renverront un vecteur de valeurs bas√© sur la premi√®re colonne.
En toute honn√™tet√©, lorsque vous avez plusieurs vecteurs li√©s, vous devez utiliser un objet de type `data.frame` (voir @sec-data-r) au lieu de plusieurs vecteurs ind√©pendants.

### Vectorisation

L'un des avantages des fonctions R est que la plupart d'entre elles sont vectoris√©es.
Cela signifie que la fonction op√®re sur tous les √©l√©ments d'un vecteur sans qu'il soit n√©cessaire d'appliquer la fonction √† chaque √©l√©ment s√©par√©ment.
Par exemple, pour multiplier chaque √©l√©ment d'un vecteur par 5, il suffit d'utiliser la fonction :

```{r}
#| echo: true
#| eval: true
# cr√©er un vecteur
mon_vec2 <- c(3, 5, 7, 1, 9, 20)

# multiplier chaque √©l√©ment par 5
mon_vec2 * 5
```

Ou nous pouvons additionner les √©l√©ments de deux vecteurs ou plus :

```{r}
#| echo: true
#| eval: true
# cr√©er un deuxi√®me vecteur
mon_vec3 <- c(17, 15, 13, 19, 11, 0)

# additionner les 2 vecteurs
mon_vec2 + mon_vec3

# multiplier les 2 vecteurs
mon_vec2 * mon_vec3
```

Cependant, vous devez faire attention lorsque vous utilisez la vectorisation avec des vecteurs de longueurs diff√©rentes, car R recyclera tranquillement les √©l√©ments du vecteur le plus court plut√¥t que de signaler une erreur.

```{r}
#| echo: true
#| eval: true
# cr√©er un troisi√®me vecteur
mon_vec4 <- c(1, 2)

# additionner les 2 vecteurs - recyclage tranquille!
mon_vec2 + mon_vec4
```

### Donn√©es manquantes {#sec-na-vals}

Dans R, les donn√©es manquantes sont g√©n√©ralement repr√©sent√©es par un `NA` qui signifie "Not Available" (Non disponible).
Les donn√©es peuvent √™tre manquantes pour toute une s√©rie de raisons : votre machine est peut-√™tre tomb√©e en panne, vous √™tes peut-√™tre tomb√© en panne, le temps √©tait peut-√™tre trop mauvais pour collecter des donn√©es un jour donn√©, etc.
Les donn√©es manquantes peuvent √™tre une v√©ritable plaie, tant du point de vue de R que du point de vue statistique.
Du point de vue de R, les donn√©es manquantes peuvent √™tre probl√©matiques car diff√©rentes fonctions traitent les donn√©es manquantes de diff√©rentes mani√®res.
Par exemple, supposons que nous ayons recueilli des relev√©s de temp√©rature de l'air pendant 10 jours, mais que notre thermom√®tre se soit cass√© le deuxi√®me et le neuvi√®me jour, de sorte que nous n'avons pas de donn√©es pour ces jours-l√† :

```{r}
#| echo: true
#| eval: true
temp <- c(7.2, NA, 7.1, 6.9, 6.5, 5.8, 5.8, 5.5, NA, 5.5)
temp
```

Nous voulons maintenant calculer la temp√©rature moyenne sur ces jours √† l'aide de la fonction `mean()` :

```{r}
#| echo: true
#| eval: true
temp_moyenne <- mean(temp)
temp_moyenne
```

Si un vecteur a une valeur manquante, la seule valeur possible √† renvoyer lors du calcul d'une moyenne est `NA`.
R ne sait pas que vous souhaitez peut-√™tre ignorer la valeur `NA` (R ne peut pas lire dans vos pens√©es - pour l'instant !).
Si nous regardons le fichier d'aide (en utilisant `?mean` - voir la section suivante @sec-help pour plus de d√©tails) associ√© √† la fonction `mean()` nous pouvons voir qu'il y a un argument `na.rm =` qui prend la valeur `FALSE` par d√©faut.

> na.rm - une valeur logique indiquant si les valeurs NA doivent √™tre supprim√©es avant le calcul ("na remove").

Si nous rempla√ßons cet argument par `na.rm = TRUE` lorsque nous utilisons la fonction `mean()` cela nous permettra d'ignorer les `NA` lors du calcul de la moyenne :

```{r}
#| echo: true
#| eval: true
temp_moyenne <- mean(temp, na.rm = TRUE)
temp_moyenne
```

Il est important de noter que les `NA` n'ont pas √©t√© retir√©s du vecteur `temp` (ce serait une mauvaise pratique), mais que l'objet `mean()` les a simplement ignor√©es.
Le but de ce qui pr√©c√®de est de souligner comment nous pouvons modifier le comportement par d√©faut d'une fonction √† l'aide d'un argument appropri√©.
Le probl√®me est que toutes les fonctions n'ont pas d'argument `na.rm =` elles peuvent g√©rer les `NA` diff√©remment.
Cependant, la bonne nouvelle est que chaque fichier d'aide associ√© √† une fonction vous indiquera **toujours** comment les donn√©es manquantes sont trait√©es par d√©faut.

## Obtenir de l'aide {#sec-help}

Ce livre est con√ßu comme une introduction relativement br√®ve √† R et, en tant que tel, vous utiliserez bient√¥t des fonctions et des paquets qui d√©passent le cadre de ce texte d'introduction.
Heureusement, l'une des forces de R est son syst√®me d'aide complet et facilement accessible, ainsi que la richesse des ressources en ligne o√π vous pouvez obtenir de plus amples informations.

### Aide R

Pour acc√©der √† l'aide int√©gr√©e de R et obtenir des informations sur n'importe quelle fonction, il suffit d'utiliser la fonction `help()`.
Par exemple, pour ouvrir la page d'aide de notre amie, la fonction `mean()` :

``` r
help("mean")
```

ou vous pouvez utiliser le raccourci `?` devant la fonction :

``` r
?mean
```

la page d'aide est affich√©e dans l'onglet "Aide"(g√©n√©ralement en bas √† droite sur RStudio)

```{r}
#| label: fig-rstudio_help
#| fig-cap: Page d'aide pour la fonction `mean()` dans le panneau Aide sur Rstudio
#| echo: false
#| out-width: 50%
#| fig-align: center
knitr::include_graphics(path = "images/basic/rs_help-fr.png")
```

Il est vrai que les fichiers d'aide peuvent sembler tout sauf utiles lorsque vous commencez √† utiliser R.
Cela est probablement d√ª au fait qu'ils sont √©crits de mani√®re tr√®s concise et que le langage utilis√© est souvent assez technique et plein de jargon.
Cela dit, on s'y habitue et, avec le temps, on finit m√™me par appr√©cier une certaine beaut√© dans cette bri√®vet√© (honn√™tement !).
L'un des aspects les plus int√©ressants des fichiers d'aide est qu'ils ont tous une structure tr√®s similaire, quelle que soit la fonction.
Il est donc facile de naviguer dans le fichier pour trouver exactement ce dont vous avez besoin.

La premi√®re ligne du document d'aide contient des informations telles que le nom de la fonction et le paquet d'o√π elle provient (entre les accolades `{}`, ici `{base}` signifie que la fonction `mean()` fait partie des fonctions de base de R).
D'autres rubriques fournissent des informations plus sp√©cifiques, telles que

+-------------------+----------------------------------------------------------------------------------------------------+
| Rubriques         | Description de la rubrique                                                                         |
+:==================+:===================================================================================================+
| **Description :** | donne une br√®ve description de la fonction et de ce qu'elle fait.                                  |
+-------------------+----------------------------------------------------------------------------------------------------+
| **Usage :**       | donne le nom des arguments associ√©s √† la fonction et les √©ventuelles valeurs par d√©faut.           |
+-------------------+----------------------------------------------------------------------------------------------------+
| **Arguments :**   | fournit plus de d√©tails sur chaque argument et sur ce qu'il fait.                                  |
+-------------------+----------------------------------------------------------------------------------------------------+
| **Details :**     | donne des d√©tails suppl√©mentaires sur la fonction si n√©cessaire.                                   |
+-------------------+----------------------------------------------------------------------------------------------------+
| **Value :**       | le cas √©ch√©ant, indique le type et la structure de l'objet renvoy√© par la fonction ou l'op√©rateur. |
+-------------------+----------------------------------------------------------------------------------------------------+
| **See also :**    | fournit des informations sur d'autres pages d'aide au contenu similaire ou connexe.                |
+-------------------+----------------------------------------------------------------------------------------------------+
| **Examples :**    | donne quelques exemples d'utilisation de la fonction.                                              |
+-------------------+----------------------------------------------------------------------------------------------------+

<!--
: Structure du fichier d'aide {#tbl-help}
-->

Les **Examples** (Exemples d'application) sont tr√®s utiles, il suffit de les copier et de les coller dans la console pour voir ce qui se passe.
Vous pouvez √©galement acc√©der aux exemples √† tout moment en utilisant la fonction `example()` (c'est-√†-dire `example("mean")`)

La fonction `help()` est utile si vous connaissez le nom de la fonction.
Si vous n'√™tes pas s√ªr du nom, mais que vous vous souvenez d'un mot cl√©, vous pouvez faire une recherche dans le syst√®me d'aide de R √† l'aide de la fonction `help.search()`.

``` r
help.search("mean")
```

ou vous pouvez utiliser le raccourci √©quivalent `??` :

``` r
??mean
```

Les r√©sultats de la recherche seront affich√©s dans RStudio sous l'onglet "Aide" comme pr√©c√©demment.
`help.search()` recherche dans la documentation d'aide, les d√©monstrations de code et les vignettes de paquet et affiche les r√©sultats sous forme de liens cliquables pour une exploration plus approfondie.

```{r}
#| label: fig-rstudio_help2
#| fig-cap: Sortie de la fonction `help.search()` dans Rstudio
#| echo: false
#| out-width: 50%
#| fig-align: center
knitr::include_graphics(path = "images/basic/rs_help2-fr.png")
```

Une autre fonction utile est `apropos()`.
Cette fonction peut √™tre utilis√©e pour dresser la liste de toutes les fonctions contenant une cha√Æne de caract√®res sp√©cifi√©e.
Par exemple, pour trouver toutes les fonctions avec `mean` dans leur nom :

```{r}
#| echo: true
#| eval: true
apropos("mean")
```

Vous pouvez alors afficher le fichier d'aide de la fonction concern√©e.

``` r
help("kmeans")
```

Une autre fonction est `RSiteSearch()` qui vous permet de rechercher des mots-cl√©s et des phrases dans les pages d'aide des fonctions et les vignettes de tous les paquets CRAN.
Cette fonction vous permet d'acc√©der au moteur de recherche du site web de R <https://www.r-project.org/search.html> directement √† partir de la console et d'afficher les r√©sultats dans votre navigateur web.

``` r
RSiteSearch("regression")
```

### Autres sources d'aide {#sec-rhelp}

Il n'y a jamais eu de meilleur moment pour commencer √† apprendre R.
Il existe pl√©thore de ressources en ligne disponibles gratuitement, allant de cours complets √† des tutoriels et des listes de diffusion sp√©cifiques √† un sujet.
Il existe √©galement de nombreuses options payantes si c'est votre truc, mais √† moins que vous n'ayez de l'argent √† br√ªler, il n'est vraiment pas n√©cessaire de d√©penser votre argent durement gagn√©.
Vous trouverez ci-dessous quelques ressources que nous avons trouv√©es utiles.

#### Ressources g√©n√©rales sur les R

-   [Projet R][r-docs]: Documentation fournie par l'utilisateur
-   [Le journal R][r-journal]: Journal du projet R pour le calcul statistique
-   [Tourbillon][swirl]: Un paquet R qui vous enseigne R de l'int√©rieur
-   [Les antis√®ches imprimables de RStudio][rstudio-cheat]
-   [Rseek][rseek] Une recherche Google personnalis√©e pour les sites li√©s √† R

#### Obtenir de l'aide

-   Cherchez sur internet: utiliser votre moteur de recherche pr√©f√©r√© pour chercher les messages d'erreur que vous obtenez.
    Ce n'est pas de la triche et tout le monde le fait !
    Vous serez surpris du nombre de personnes qui ont probablement rencontr√© le m√™me probl√®me et l'ont r√©solu.
-   [Stack Overflow][stackr]: Il y a plusieurs milliers de questions relatives √† R sur Stack Overflow.
    [Ici][stack-pop] sont les plus populaires, class√©es par vote.
    Veillez √† rechercher des questions similaires avant de poser la v√¥tre et √† inclure un [exemple reproductible][stack-repro] afin d'obtenir les conseils les plus utiles.
    Un exemple reproductible est un exemple minimal qui permet aux personnes qui essaient de vous aider de voir l'erreur elles-m√™mes.

#### Ressources R markdown

-   [R√©f√©rence de base pour markdown et markdown R][bio-con]
-   [Une bonne r√©f√©rence en markdown][md-ref]
-   [Un bon tutoriel de 10 minutes sur le markdown][md-tut]
-   [Feuille de contr√¥le de RStudio sur le format R markdown][rmd-cheat]
-   [Feuille de r√©f√©rence pour R markdown][rmd-ref]
-   [La documentation R markdown][rs-rm-docs] incluant un [guide de d√©marrage][rm-lesson] , a [galerie de d√©monstrations][rm-gallery] et plusieurs [articles][rs-articles] pour une utilisation plus avanc√©e.
-   [Le site web de knitr][knitr] contient de nombreux documents de r√©f√©rence utiles sur le fonctionnement de knitr.

#### Ressources Git et GitHub

-   [Happy Git][git_happy]: Excellente ressource pour l'utilisation de Git et GitHub
-   [Contr√¥le de version avec RStudio][rs-Git]: Document RStudio pour l'utilisation du contr√¥le de version
-   [Utiliser Git depuis RStudio][git-rs]: Un bon guide en 10 minutes
-   [La classe R][rclass]: Guide approfondi de l'utilisation de Git et GitHub avec RStudio

#### Programmation R

-   [Programmation R pour la science des donn√©es][r-rprog]: Guide approfondi de la programmation R
-   [R pour la science des donn√©es][r4ds]: Livre fantastique, orient√© tidyverse

## Sauvegarder des donn√©es dans R

Votre approche de l'enregistrement du travail dans R et RStudio d√©pend de ce que vous voulez enregistrer.
La plupart du temps, la seule chose que vous devrez sauvegarder est le code R de vos scripts.
N'oubliez pas que votre script est un enregistrement reproductible de tout ce que vous avez fait.
Il vous suffit donc d'ouvrir votre script dans une nouvelle session RStudio et de l'ex√©cuter dans la console R pour revenir √† l'endroit o√π vous vous √©tiez arr√™t√©.

√Ä moins que vous n'ayez suivi notre suggestion de modifier les param√®tres par d√©faut des projets RStudio (voir @sec-rsprojs), il vous sera demand√© si vous souhaitez sauvegarder l'image de votre espace de travail √† chaque fois que vous quitterez RStudio.
Nous pensons que dans 99,9 % des cas, vous ne souhaitez pas le faire.
En commen√ßant avec une session RStudio propre chaque fois que nous revenons √† notre analyse, nous pouvons √™tre s√ªrs d'√©viter tout conflit potentiel avec les choses que nous avons faites dans les sessions pr√©c√©dentes.

Cependant, il est parfois utile de sauvegarder les objets que vous avez cr√©√©s dans R.
Par exemple, imaginons que vous cr√©iez un objet dont la g√©n√©ration n√©cessite des heures (voire des jours) de temps de calcul.
Il serait extr√™mement g√™nant de devoir attendre tout ce temps √† chaque fois que vous revenez sur votre analyse. Cependant, dans ce cas, nous pouvons enregistrer cet objet en tant que fichier externe, `.RData` que nous pourrons charger dans RStudio la prochaine fois que nous voudrons l'utiliser.
Pour enregistrer un objet dans un fichier `.RData` vous pouvez utiliser la fonction `save()` (remarquez que nous n'avons pas besoin d'utiliser l'op√©rateur d'affectation ici) :

``` r
save(nomDelObjet, file = "nom_du_fichier.RData")
```

ou si vous souhaitez sauvegarder tous les objets de votre espace de travail dans un seul fichier `.RData` utilisez la fonction `save.image()` :

``` r
save.image(file = "nom_du_fichier.RData")
```

Pour charger votre `.RData` dans RStudio, utilisez la fonction `load()` :

``` r
load(file = "nom_du_fichier.RData")
```

## Paquets R {#sec-packages}

L'installation de base de R est livr√©e avec de nombreux paquets utiles.
Ces paquets contiennent de nombreuses fonctions que vous utiliserez quotidiennement.
Cependant, lorsque vous commencerez √† utiliser R pour des projets plus vari√©s (et que votre propre utilisation de R √©voluera), vous constaterez qu'il y a un moment o√π vous aurez besoin d'√©tendre les capacit√©s de R.
Heureusement, des milliers d'utilisateurs de R ont d√©velopp√© du code utile et l'ont partag√© sous forme de paquets installables.
Vous pouvez consid√©rer un paquet comme une collection de fonctions, de donn√©es et de fichiers d'aide rassembl√©s dans une structure standard bien d√©finie que vous pouvez t√©l√©charger et installer dans R.
Ces paquets peuvent √™tre t√©l√©charg√©s √† partir de diverses sources, mais les plus populaires sont les suivantes [CRAN][cran-packages], [Bioconductor][bioconductor] et [GitHub][github] .
Actuellement, le CRAN h√©berge plus de 15 000 paquets et est le d√©p√¥t officiel des paquets R fournis par les utilisateurs.
Bioconductor fournit des logiciels libres orient√©s vers la bioinformatique et h√©berge plus de 1800 paquets R.
GitHub est un site web qui h√©berge des d√©p√¥ts git pour toutes sortes de logiciels et de projets (pas seulement R).
Souvent, les versions de d√©veloppement de pointe des paquets R sont h√©berg√©es sur GitHub, donc si vous avez besoin de toutes les nouvelles fonctionnalit√©s, cela peut √™tre une option.
Cependant, l'inconv√©nient potentiel de l'utilisation de la version de d√©veloppement d'un paquet R est qu'elle peut ne pas √™tre aussi stable que la version h√©berg√©e sur CRAN (elle est en cours de d√©veloppement !) et que la mise √† jour des paquets ne sera pas automatique.

### Utilisation des paquets

Une fois que vous avez install√© un paquet sur votre ordinateur, vous ne pouvez pas l'utiliser imm√©diatement.
Pour utiliser un paquet, vous devez d'abord le charger √† l'aide de la fonction `library()`. Par exemple, pour charger le paquet `remotes` :package: que vous avez install√© pr√©c√©demment :

``` r
library(remotes)
```

La fonction `library()` chargera √©galement tous les paquets suppl√©mentaires n√©cessaires et pourra afficher des informations suppl√©mentaires sur les paquets dans la console.
Il est important de savoir que chaque fois que vous d√©marrez une nouvelle session R (ou que vous restaurez une session pr√©c√©demment sauvegard√©e), vous devez charger les paquets que vous utiliserez.
Nous avons tendance √† mettre tous nos `library()` n√©cessaires √† notre analyse en t√™te de nos scripts R afin de les rendre facilement accessibles et de pouvoir les compl√©ter au fur et √† mesure du d√©veloppement de notre code.
Si vous essayez d'utiliser une fonction sans avoir pr√©alablement charg√© le paquet R correspondant, vous recevrez un message d'erreur indiquant que R n'a pas pu trouver la fonction.
Par exemple, si vous essayez d'utiliser la fonction `install_github()` sans charger le paquet `remotes` :package: en premier lieu, vous obtiendrez l'erreur suivante :

``` r
install_github("tidyverse/dplyr")

# Error in install_github("tidyverse/dplyr") :
#  could not find function "install_github"
```

Il peut parfois √™tre utile d'utiliser une fonction sans utiliser au pr√©alable la fonction`library()`.
Si, par exemple, vous n'utilisez qu'une ou deux fonctions dans votre script et que vous ne souhaitez pas charger toutes les autres fonctions d'un paquet, vous pouvez acc√©der directement √† la fonction en sp√©cifiant le nom du paquet, suivi de deux points (2 fois) `::`, puis du nom de la fonction :

``` r
remotes::install_github("tidyverse/dplyr")
```

C'est ainsi que nous avons pu utiliser la fonction `install()` et `install_github()` [ci-dessous][Paquets Bioconductor] sans charger les paquets au pr√©alable`BiocManager` :package: et `remotes` :package: .
La plupart du temps, nous recommandons d'utiliser la fonction `library()`.

### Installation des paquets R

#### Paquets CRAN {#sec-cran-packages}

Pour installer un paquet √† partir du CRAN, vous pouvez utiliser la fonction `install.packages()`.
Par exemple, si vous voulez installer le paquet `remotes` :package: entrez le code suivant dans la Console (note : vous aurez besoin d'une connexion internet fonctionnelle pour effectuer cette op√©ration) :

``` r
install.packages("remotes", dependencies = TRUE)
```

Il vous sera peut-√™tre demand√© de choisir un miroir CRAN, s√©lectionnez simplement '0-cloud' ou un miroir proche de votre localisation.
L'argument `dependencies = TRUE` permet de s'assurer que les paquets suppl√©mentaires n√©cessaires seront √©galement install√©s.

Il est conseill√© de mettre r√©guli√®rement √† jour les paquets d√©j√† install√©s afin de b√©n√©ficier des nouvelles fonctionnalit√©s et des corrections de bogues.
Pour mettre √† jour les paquets CRAN, vous pouvez utiliser la commande `update.packages()` (vous aurez besoin d'une connexion internet pour cela) :

``` r
update.packages(ask = FALSE)
```

L'argument `ask = FALSE` √©vite d'avoir √† confirmer chaque t√©l√©chargement de paquet, ce qui peut √™tre fastidieux si de nombreux paquets sont install√©s.

#### Paquets Bioconductor

Pour installer des paquets de Bioconductor, le processus est [un peu diff√©rent][bioc-install].
Vous devez d'abord installer le paquet `BiocManager` :package:.
Vous ne devez le faire qu'une seule fois, sauf si vous r√©installez ou mettez √† jour R.

``` r
install.packages("BiocManager", dependencies = TRUE)
```

Une fois que `BiocManager` a √©t√© install√©, vous pouvez soit installer tous les paquets "de base" de Bioconductor avec la commande :

``` r
BiocManager::install()
```

ou installer des paquets sp√©cifiques tels que le `GenomicRanges` :package: et `edgeR` :package: :

``` r
BiocManager::install(c("GenomicRanges", "edgeR"))
```

Pour mettre √† jour les paquets de Bioconductor, il suffit d'utiliser la commande `BiocManager::install()` √† nouveau :

``` r
BiocManager::install(ask = FALSE)
```

L√† encore, vous pouvez utiliser l'argument `ask = FALSE` pour √©viter d'avoir √† confirmer chaque t√©l√©chargement de paquet.

#### Paquets GitHub

Il existe plusieurs options pour installer les paquets h√©berg√©s sur GitHub.
La m√©thode la plus efficace est sans doute d'utiliser la fonction `install_github()` du paquet `remotes` :package: (vous avez install√© ce paquet pr√©c√©demment, @sec-cran-packages).
Avant d'utiliser la fonction, vous devez conna√Ætre le nom d'utilisateur GitHub du propri√©taire du r√©pertoire ainsi que le nom du r√©pertoire.
Par exemple, la version de d√©veloppement de `dplyr` :package: de Hadley Wickham est h√©berg√©e sur le compte GitHub de tidyverse et porte le nom de r√©pertoire "dplyr" (recherchez simplement "github dplyr").
Pour installer cette version depuis GitHub, utilisez :

``` r
remotes::install_github("tidyverse/dplyr")
```

Le moyen le plus s√ªr (√† notre connaissance) de mettre √† jour un paquet install√© depuis GitHub est de le r√©installer en utilisant la commande ci-dessus.

```{r}
#| label: links
#| child: images/_links.md
```
