# Programmation {#sec-prog-r}

Après avoir appris les bases, la programmation en R est la prochaine étape importante.
Il existe déjà un grand nombre de paquets R disponibles, ce qui est certainement plus que suffisant pour couvrir tout ce que vous pourriez vouloir faire ? Pourquoi alors créer ses propres fonctions R ? Pourquoi ne pas s'en tenir aux fonctions d'un paquet ? Dans certains cas, vous voudrez personnaliser ces fonctions existantes pour répondre à vos besoins spécifiques.
Il se peut aussi que vous souhaitiez mettre en œuvre une nouvelle approche, ce qui signifie qu'il n'y aura pas de packages préexistants qui fonctionneront pour vous.
Ces deux cas de figure ne sont pas particulièrement courants.
Les fonctions sont principalement utilisées pour faire une chose de manière simple sans avoir à taper le code nécessaire à l'exécution de cette fonction à chaque fois.
On peut considérer les fonctions comme un raccourci vers le copier-coller.
Si vous devez effectuer une tâche similaire quatre fois ou plus, créez une fonction pour cela, et appelez simplement cette fonction quatre fois ou appelez-la dans une boucle.

## Regarder derrière le rideau

Une bonne façon de commencer à apprendre à programmer en R est de voir ce que d'autres ont fait.
Nous pouvons commencer par jeter un bref coup d'œil derrière le rideau.
Avec de nombreuses fonctions en R, si vous voulez jeter un coup d'œil rapide à la machinerie en coulisses, nous pouvons simplement écrire le nom de la fonction, mais sans l'attribut `()`.

Notez que l'affichage du code source des paquets R de base (ceux qui sont livrés avec R) nécessite quelques étapes supplémentaires que nous ne couvrirons pas ici (voir ce [lien][show-code] si cela vous intéresse), mais pour la plupart des autres paquets que vous installez vous-même, il suffit généralement d'entrer le nom de la fonction sans la mention`()` affichera le code source de la fonction.

Vous pouvez jeter un coup d'oeil à la fonction d'ajustement d'un modèle linéaire `lm()`

```{r}
#| label: lm-fnc
lm
```

Ce que nous voyons ci-dessus est le code sous-jacent de cette fonction particulière.
Nous pourrions le copier et le coller dans notre propre script et y apporter toutes les modifications que nous jugerions nécessaires, mais en faisant preuve de prudence et en testant les changements que vous avez apportés.

Ne vous inquiétez pas outre mesure si la majeure partie du code contenu dans les fonctions n'a pas de sens immédiat.
C'est particulièrement vrai si vous êtes novice en matière de R, auquel cas cela semble incroyablement intimidant. Honnêtement, cela peut être intimidant même après des années d'expérience avec R.
Pour y remédier, nous commencerons par créer nos propres fonctions en R dans la section suivante.

## Fonctions en R

Les fonctions sont le pain et le beurre de R, les éléments essentiels qui vous permettent de travailler avec R.
Elles sont créées (la plupart du temps) avec le plus grand soin et la plus grande attention, mais peuvent finir par ressembler à un monstre de Frankenstein - avec des membres bizarrement attachés.
Mais aussi alambiqués qu'ils puissent être, ils feront toujours fidèlement la même chose.

Cela signifie que les fonctions peuvent également être très stupides.

Si nous vous demandons d'aller au supermarché pour nous procurer des ingrédients pour faire des *du poulet Balmoral* même si vous ne savez pas ce que c'est, vous serez capable de deviner et d'apporter au moins *quelque chose* quelque chose.
Vous pouvez aussi décider de faire autre chose.
Ou vous pouvez demander de l'aide à un chef cuisinier.
Ou vous pouvez sortir votre téléphone et chercher en ligne ce que vous voulez faire. *[Poulet Balmoral][balmoral-ck]* est.
Le fait est que, même si nous ne vous avons pas donné suffisamment d'informations pour accomplir la tâche, vous êtes suffisamment intelligent pour, au moins, essayer de trouver une solution de contournement.

Si, au contraire, nous demandions à une fonction de faire la même chose, elle écouterait attentivement notre demande, puis renverrait simplement une erreur.
Elle répéterait cela à chaque fois que nous lui demanderions de faire le travail lorsque la tâche n'est pas claire.
Ce qu'il faut retenir ici, c'est que le code et les fonctions ne peuvent pas trouver de solutions de contournement à des informations mal fournies, ce qui est une excellente chose.
Il dépend entièrement de vous pour lui dire très explicitement ce qu'il doit faire, étape par étape.

N'oubliez pas deux choses : l'intelligence du code vient du codeur, pas de l'ordinateur, et les fonctions ont besoin d'instructions exactes pour fonctionner.

Pour éviter que les fonctions ne soient *trop* stupides, vous devez fournir les informations dont la fonction a besoin pour fonctionner.
Comme pour la fonction *poulet du Balmoral* si nous avions fourni une liste de recettes à la fonction, tout se serait bien passé.
C'est ce que nous appelons "remplir un argument".
La grande majorité des fonctions exigent de l'utilisateur qu'il remplisse au moins un argument.

Ceci peut être illustré dans le pseudocode ci-dessous.
Lorsque nous créons une fonction, nous pouvons :

- spécifier les arguments que l'utilisateur doit remplir (*par exemple* `arg1` et `arg2`)
- fournissent des valeurs par défaut aux arguments (*par exemple* `arg2 = TRUE`)
- définir ce qu'il faut faire avec les arguments (`expression`) :

```{r}
#| label: generic_function
#| eval: false
my_function <- function(arg1, arg2, ...) {
  expression
}
```

La première chose à noter est que nous avons utilisé la fonction `function()` pour créer une nouvelle fonction appelée `my_function`.
Pour parcourir le code ci-dessus, nous créons une fonction appelée `my_function`.
Entre les crochets ronds, nous spécifions les informations (*c'est-à-dire*
arguments) dont la fonction a besoin pour fonctionner (autant ou aussi peu que nécessaire).
Ces arguments sont ensuite transmis à la partie expression de la fonction.
L'expression peut être n'importe quelle commande R valide ou n'importe quel ensemble de commandes R et est généralement
entre une paire d'accolades `{ }`.
Une fois que vous avez exécuté le code ci-dessus, vous pouvez utiliser votre nouvelle fonction en tapant :

```{r}
#| label: run_function
#| eval: false
#| out-width: 75%
my_function(arg1, arg2)
```

Prenons un exemple pour clarifier les choses.

Tout d'abord, nous allons créer un cadre de données appelé `dishes` où les colonnes `lasagna`, `stovies`, `poutine` et `tartiflette` sont remplis avec 10 valeurs aléatoires tirées d'un sac (à l'aide de la fonction `rnorm()` pour tirer des valeurs aléatoires d'une distribution normale avec une moyenne de 0 et un écart type de 1).
Nous incluons également un "problème", que nous devrons résoudre plus tard, en incluant 3 `NA` dans la fonction `poutine` (en utilisant `rep(NA, 3)`).

```{r}
#| label: dishes-data
#| out-width: 75%
dishes <- data.frame(
  lasagna = rnorm(10),
  stovies = rnorm(10),
  poutine = c(rep(NA, 3), rnorm(7)),
  tartiflette = rnorm(10)
)
```

Supposons que vous souhaitiez multiplier les valeurs des variables `stovies` et `lasagna` et créer un nouvel objet appelé `stovies_lasagna`.
Nous pouvons le faire "à la main" en utilisant :

```{r}
#| label: manual
stovies_lasagna <- dishes$stovies * dishes$lasagna
```

Si c'était tout ce que nous avions à faire, nous pourrions nous arrêter ici.
R fonctionne avec des vecteurs, de sorte qu'effectuer ce type d'opérations dans R est en fait beaucoup plus simple que dans d'autres langages de programmation, où ce type de code peut nécessiter des boucles (nous disons que R est un langage vectorisé).
Une chose à garder à l'esprit pour plus tard est que faire ce genre d'opérations avec des boucles peut être beaucoup plus lent que la vectorisation.

Mais que se passe-t-il si nous voulons répéter cette multiplication plusieurs fois ? Supposons que nous voulions multiplier les colonnes `lasagna` et `stovies`, `stovies` et `tartiflette` et `poutine` et `tartiflette`.
Dans ce cas, nous pouvons copier et coller le code en remplaçant les informations pertinentes.

```{r}
#| label: simple
#| out-width: 75%
lasagna_stovies <- dishes$lasagna * dishes$stovies
stovies_tartiflette <- dishes$stovies * dishes$stovies
poutine_tartiflette <- dishes$poutine * dishes$tartiflette
```

Bien que cette approche fonctionne, il est facile de faire des erreurs.
En fait, ici, nous avons "oublié" de modifier `stovies` en `tartiflette` dans la deuxième ligne de code lors du copier-coller.
C'est là que l'écriture d'une fonction s'avère utile.
Si nous écrivions cela sous forme de fonction, il n'y aurait qu'une seule source d'erreur potentielle (dans la fonction elle-même) au lieu de nombreuses lignes de code copiées-collées (que nous réduisons également en utilisant une fonction).

::: {.callout-tip}
En règle générale, si nous devons faire la même chose (par copier/coller et modifier) 3 fois ou plus,
nous créons une fonction pour cela.
:::

Dans ce cas, nous utilisons un code assez trivial où il est peut-être difficile de faire une véritable erreur.
Mais que se passerait-il si nous augmentions la complexité ?

```{r}
#| label: complex
#| eval: false
dishes$lasagna * dishes$stovies / dishes$lasagna + (dishes$lasagna * 10^(dishes$stovies))
-dishes$stovies - (dishes$lasagna * sqrt(dishes$stovies + 10))
```

Imaginez maintenant que vous deviez copier et coller ce code trois fois, et que vous deviez à chaque fois modifier l'élément `lasagna` et `stovies` (surtout si nous devions le faire plus de trois fois).

Ce que nous pourrions faire à la place, c'est généraliser notre code pour `x` et `y` au lieu de nommer des plats spécifiques.
En procédant de la sorte, nous pourrions recycler la `x * y` code.
Chaque fois que nous voulions regrouper plusieurs colonnes, nous assignions une parabole à l'un ou l'autre des éléments suivants `x` ou `y`.
Nous attribuerons la multiplication aux objets `lasagna_stovies` et `stovies_poutine` afin de pouvoir y revenir plus tard.

```{r}
#| label: manual_function
#| eval: false
# Assign x and y values
x <- dishes$lasagna
y <- dishes$stovies

# Use multiplication code
lasagna_stovies <- x * y

# Assign new x and y values
x <- dishes$stovies
y <- dishes$poutine

# Reuse multiplication code
stovies_poutine <- x * y
```

C'est essentiellement ce que fait une fonction.
Appelons notre nouvelle fonction `multiply_cols()` et définissons-la avec deux arguments, `x` et `y`.
Une fonction dans R renvoie simplement sa dernière valeur. Toutefois, il est possible de forcer la fonction à renvoyer une valeur antérieure si cela s'avère nécessaire.
Pour ce faire, il suffit d'utiliser la fonction `return()` n'est pas strictement nécessaire dans cet exemple car R retournera automatiquement la valeur de la dernière ligne de code de notre fonction.
Nous l'incluons ici pour l'expliciter.

```{r}
#| label: first_function
multiply_cols <- function(x, y) {
  return(x * y)
}
```

Maintenant que nous avons défini notre fonction, nous pouvons l'utiliser.
Utilisons la fonction pour multiplier les colonnes `lasagna` et `stovies` et assigner le résultat à un nouvel objet appelé `lasagna_stovies_func`

```{r}
#| label: first_function2
lasagna_stovies_func <- multiply_cols(x = dishes$lasagna, y = dishes$stovies)
lasagna_stovies_func
```

Si nous ne nous intéressons qu'à la multiplication `dishes$lasagna` et `dishes$stovies` il serait exagéré de créer une fonction pour faire quelque chose une seule fois.
Cependant, l'avantage de créer une fonction est que nous avons maintenant cette fonction ajoutée à notre environnement que nous pouvons utiliser aussi souvent que nous le souhaitons.
Nous disposons également du code pour créer la fonction, ce qui signifie que nous pouvons l'utiliser dans des projets entièrement nouveaux, réduisant ainsi la quantité de code qui doit être écrite (et testée à nouveau) à partir de zéro à chaque fois.

Pour s'assurer que la fonction a fonctionné correctement, nous pouvons comparer le code `lasagna_stovies` avec notre nouvelle variable `lasagna_stovies_func` à l'aide de la fonction `identical()` fonction.
La fonction `identical()` teste si deux objets sont *exactement* identiques et renvoie soit un `TRUE` ou `FALSE` valeur.
Utiliser `?identical` pour en savoir plus sur cette fonction.

```{r}
#| label: identical_check
identical(lasagna_stovies, lasagna_stovies_func)
```

Et nous confirmons que la fonction a produit le même résultat que lorsque nous effectuons le calcul manuellement.
Nous vous recommandons de prendre l'habitude de vérifier que la fonction que vous avez créée fonctionne comme vous le pensez.

Utilisons maintenant notre `multiply_cols()` pour multiplier les colonnes `stovies` et `poutine`.
Remarquez maintenant que l'argument `x` reçoit la valeur `dishes$stovies`et `y` la valeur `dishes$poutine`.

```{r}
#| label: calc_w_na
#| eval: true
stovies_poutine_func <- multiply_cols(x = dishes$stovies, y = dishes$poutine)
stovies_poutine_func
```

Jusqu'à présent, tout va bien.
Tout ce que nous avons fait, c'est envelopper le code `x * y` dans une fonction, où nous demandons à l'utilisateur de spécifier ce que son `x` et `y` sont.

L'utilisation de la fonction est un peu longue car nous devons retaper le nom de la base de données pour chaque variable.
Pour nous amuser un peu, nous pouvons modifier la fonction afin de spécifier le cadre de données en tant qu'argument et les noms des colonnes sans les mettre entre guillemets (comme dans le style tidyverse).

```{r}
#| label: tidy-mult
#| code-line-numbers: true

multiply_cols <- function(data, x, y) {
  temp_var <- data %>%
    select({{ x }}, {{ y }}) %>%
    mutate(xy = prod(.)) %>%
    pull(xy)
}
```

Pour cette nouvelle version de la fonction, nous avons ajouté un paramètre `data` à la ligne 1. A la ligne 3, nous sélectionnons les variables x et y fournies comme arguments. A la ligne 4, nous créons le produit des 2 colonnes sélectionnées et à la ligne 5, nous extrayons la colonne que nous venons de créer.
Nous supprimons également la `return()` puisqu'elle n'était pas nécessaire

Notre fonction est maintenant compatible avec le pipe (soit en natif `|>` ou magrittr `%>%`).
Toutefois, étant donné que la fonction utilise désormais le tuyau de `magrittr` :package: et `dplyr` :package:, nous devons charger le paquet :package: de tidyverse pour qu'elle fonctionne.

```{r}
#| label: mult-pipe
library(tidyverse)
lasagna_stovies_func <- multiply_cols(dishes, lasagna, stovies)
lasagna_stovies_func <- dishes |> multiply_cols(lasagna, stovies)
```

Ajoutons maintenant un peu plus de complexité.
Si vous regardez la sortie de `poutine_tartiflette` certains des calculs ont produit `NA` valeurs.
Cela s'explique par le fait que les `NA` que nous avons incluses dans `poutine` lorsque nous avons créé l'élément `dishes` cadre de données.
Malgré ces `NA` valeurs, la fonction semble avoir fonctionné, mais elle ne nous a donné aucune indication quant à l'existence d'un problème.
Dans ce cas, nous préférerions qu'elle nous avertisse que quelque chose ne va pas.
Comment pouvons-nous faire en sorte que la fonction nous informe lorsque `NA` sont produites ? Voici une solution.

```{r}
#| label: mult-example
#| code-line-numbers: true

multiply_cols <- function(data, x, y) {
  temp_var <- data %>%
    select({{ x }}, {{ y }}) %>%
    mutate(xy = {
      .[1] * .[2]
    }) %>%
    pull(xy)
  if (any(is.na(temp_var))) {
    warning("The function has produced NAs")
    return(temp_var)
  } else {
    return(temp_var)
  }
}
```

```{r}
stovies_poutine_func <- multiply_cols(dishes, stovies, poutine)
lasagna_stovies_func <- multiply_cols(dishes, lasagna, stovies)
```

Le cœur de notre fonction reste le même, mais nous avons maintenant six lignes de code supplémentaires (lignes 6 à 11).
Nous avons inclus des instructions conditionnelles, `if` (lignes 6-8) et `else` (lignes 9-11), afin de tester si un `NA`ont été produites et, si c'est le cas, nous affichons un message d'avertissement à l'intention de l'utilisateur.
La section suivante de ce chapitre explique le fonctionnement et l'utilisation de ces fonctions.

## Déclarations conditionnelles

`x * y` n'applique aucune logique.
Il prend simplement la valeur de `x` et la multiplie par la valeur de `y`.
Les instructions conditionnelles permettent d'injecter de la logique dans votre code.
L'instruction conditionnelle la plus couramment utilisée est `if`.
Chaque fois que vous voyez un `if` lisez-le comme * Si X est VRAI, faites une chose".*.
Incluant un `else` permet simplement d'étendre la logique à * Si X est VRAI, faites une chose, ou bien faites quelque chose de différent.*.

Les deux `if` et `else` vous permettent d'exécuter des sections de code, en fonction d'une condition qui est soit `TRUE` ou `FALSE`.
Le pseudo-code ci-dessous vous montre la forme générale.

```r
  if (condition) {
  Code executed when condition is TRUE
  } else {
  Code executed when condition is FALSE
  }
```

Pour approfondir la question, nous pouvons utiliser une vieille blague de programmeur pour poser un problème.

> Le partenaire d'un programmeur dit : * Allez au magasin acheter une brique de lait et, s'il y a des œufs, prenez-en six.*
> 
> Le programmeur est revenu avec 6 briques de lait.
> 
> Lorsque le partenaire s'en aperçoit, il s'exclame * Pourquoi diable as-tu acheté six briques de lait ?*
> 
> Le programmeur a répondu *"Ils avaient des œufs*

Au risque d'expliquer une blague, l'énoncé conditionnel ici est de savoir si le magasin avait ou non des œufs.
Si le codage est conforme à la demande initiale, le programmeur doit apporter 6 briques de lait si le magasin a des œufs (condition = VRAI), ou apporter 1 brique de lait s'il n'y a pas d'œufs (condition = FAUX).
Dans R, cela est codé comme suit :

```{r}
#| label: joke_logic
eggs <- TRUE # Whether there were eggs in the store

if (eggs == TRUE) { # If there are eggs
  n.milk <- 6 # Get 6 cartons of milk
} else { # If there are not eggs
  n.milk <- 1 # Get 1 carton of milk
}
```

Nous pouvons alors vérifier `n.milk` le nombre de briques de lait qu'ils ont ramenées.

```{r}
#| label: n_milk
n.milk
```

Et comme dans la blague, notre code R n'a pas compris que la condition était de déterminer s'il fallait ou non acheter des œufs, et non plus du lait (il s'agit en fait d'un exemple libre du [schéma de Winograd][winograd] conçu pour tester la condition*l'intelligence* d'une intelligence artificielle en fonction de sa capacité à raisonner sur le sens d'une phrase).

Nous pourrions coder exactement la même instruction conditionnelle de blague œuf-lait à l'aide d'un `ifelse()` fonction.

```{r}
#| label: ifelse
eggs <- TRUE
n.milk <- ifelse(eggs == TRUE, yes = 6, no = 1)
```

Cette `ifelse()` fait exactement la même chose que la version plus étoffée de tout à l'heure, mais elle est maintenant condensée en une seule ligne de code.
Elle présente l'avantage supplémentaire de travailler sur des vecteurs plutôt que sur des valeurs individuelles (nous y reviendrons plus tard lorsque nous introduirons les boucles).
La logique est lue de la même manière : "S'il y a des oeufs, assignez une valeur de 6 à `n.milk` s'il n'y a pas d'oeufs, assigner la valeur 1 à `n.milk`".

Nous pouvons vérifier à nouveau que la logique renvoie toujours 6 briques de lait :

```{r}
#| label: ifelse_check
n.milk
```

Actuellement, nous devrions copier et coller du code si nous voulions changer la présence ou l'absence d'œufs dans le magasin.
Nous avons appris plus haut comment éviter de nombreux copier-coller en créant une fonction.
Comme avec la simple fonction `x * y` de notre précédente expression `multiply_cols()` les déclarations logiques ci-dessus sont simples à coder et se prêtent bien à la transformation en fonction.
Et si nous faisions justement cela et enveloppions cette déclaration logique dans une fonction ?

```{r}
#| label: joke_function
milk <- function(eggs) {
  if (eggs == TRUE) {
    6
  } else {
    1
  }
}
```

Nous avons créé une fonction appelée `milk()` dont le seul argument est `eggs`.
L'utilisateur de la fonction spécifie si les œufs sont soit `TRUE` ou `FALSE` et la fonction utilisera alors une instruction conditionnelle pour déterminer le nombre de cartons de lait renvoyés.

Essayons rapidement :

```{r}
#| label: joke_func_check
milk(eggs = TRUE)
```

Et la plaisanterie est maintenue.
Remarquez que, dans ce cas, nous avons spécifié que nous remplissons la fonction `eggs` (`eggs = TRUE`).
Dans certaines fonctions, comme la nôtre ici, lorsqu'une fonction n'a qu'un seul argument, nous pouvons être paresseux et ne pas nommer l'argument que nous remplissons.
En réalité, on considère généralement qu'il est préférable d'indiquer explicitement les arguments que l'on remplit afin d'éviter les erreurs potentielles.

OK, revenons à la fonction `multiply_cols()` que nous avons créée ci-dessus et expliquons comment nous avons utilisé des instructions conditionnelles pour avertir l'utilisateur si `NA` sont produites lorsque nous multiplions deux colonnes.

```{r}
#| label: mult-example
```

Dans cette nouvelle version de la fonction, nous utilisons toujours `x * y` comme auparavant, mais cette fois nous avons assigné les valeurs de ce calcul à un vecteur temporaire appelé `temp_var` afin de pouvoir l'utiliser dans nos instructions conditionnelles.
Notez que ce `temp_var` est *locale* à notre fonction et n'existera pas en dehors de la fonction en raison de ce que l'on appelle les règles de cadrage de R . [règles de cadrage de R][cadrage] .
Nous utilisons ensuite un `if` pour déterminer si notre `temp_var` contient des `NA` valeurs.
Pour ce faire, nous utilisons d'abord la fonction `is.na()` pour vérifier si chaque valeur de notre `temp_var` est un `NA`.
Les `is.na()` renvoie `TRUE` si la valeur est un `NA` et `FALSE` si la valeur n'est pas un `NA`.
Nous imbriquons ensuite le `is.na(temp_var)` à l'intérieur de la fonction `any()` pour vérifier si **une** des valeurs retournées par `is.na(temp_var)` sont `TRUE`.
Si au moins une valeur est `TRUE` l'une `any()` renverra une valeur `TRUE`.
Ainsi, s'il existe des `NA` valeurs dans notre `temp_var` la condition pour le `if()` sera `TRUE` alors que s'il n'y a pas de `NA` valeurs présentes, la condition sera `FALSE`.
Si la condition est `TRUE` la `warning()` génère un message d'avertissement à l'intention de l'utilisateur et renvoie la valeur de la fonction `temp_var` variable.
Si la condition est `FALSE` le code sous le `else` est exécuté, ce qui renvoie simplement la valeur `temp_var` .

Ainsi, si nous exécutons notre `multiple_columns()` sur les colonnes `dishes$stovies` et `dishes$poutine` (qui contient `NA`s), nous recevrons un message d'avertissement.

```{r}
stovies_poutine_func <- multiply_cols(dishes, stovies, poutine)
```

En revanche, si nous multiplions deux colonnes qui ne contiennent pas de `NA` nous ne recevons pas de message d'avertissement

```{r}
lasagna_stovies_func <- multiply_cols(dishes, lasagna, stovies)
```

## Combinaison d'opérateurs logiques

Les fonctions que nous avons créées jusqu'à présent étaient parfaitement adaptées à nos besoins, même si elles étaient assez simplistes.
Essayons de créer une fonction un peu plus complexe.
Nous allons créer une fonction permettant de déterminer si la journée d'aujourd'hui sera bonne ou non en fonction de deux critères.
Le premier critère dépendra du jour de la semaine (vendredi ou non) et le second sera de savoir si votre code fonctionne ou non (VRAI ou FAUX).
Pour ce faire, nous utiliserons `if` et `else` et des déclarations.
La complexité viendra de `if` des déclarations qui suivent immédiatement les `else` pertinente.
Nous utiliserons ces instructions conditionnelles quatre fois pour obtenir toutes les combinaisons possibles, qu'il s'agisse d'un vendredi ou non, et pour savoir si votre code fonctionne ou non.

Nous avons également utilisé l'instruction `cat()` pour produire un texte formaté correctement.

```{r}
good.day <- function(code.working, day) {
  if (code.working == TRUE && day == "Friday") {
    cat(
  "BEST.
  DAY.
    EVER.
      Stop while you are ahead and go to the pub!"
    )
  } else if (code.working == FALSE && day == "Friday") {
    cat("Oh well, but at least it's Friday! Pub time!")
  } else if (code.working == TRUE && day != "Friday") {
    cat("
  So close to a good day...
  shame it's not a Friday"
    )
  } else if (code.working == FALSE && day != "Friday") {
    cat("Hello darkness.")
  }
}
```

```{r}
good.day(code.working = TRUE, day = "Friday")

good.day(FALSE, "Tuesday")
```

Vous avez remarqué que nous n'avons jamais spécifié ce qu'il fallait faire si le jour n'était pas un vendredi ? C'est parce que, pour cette fonction, la seule chose qui compte est de savoir si c'est un vendredi ou non.

Nous avons également utilisé des opérateurs logiques chaque fois que nous avons utilisé la fonction `if` à chaque fois que nous avons utilisé des instructions.
Les opérateurs logiques sont la dernière pièce du puzzle des conditions logiques.
Le tableau ci-dessous résume les opérateurs.
Les deux premiers sont des opérateurs logiques et les six derniers sont des opérateurs relationnels.
Vous pouvez utiliser n'importe lequel de ces opérateurs lorsque vous créez vos propres fonctions (ou boucles).

| Opérateur | Description technique | Ce que cela signifie                      | Exemple d'application | 
| --------: | :-------------------: | :---------------------------------------- | :-------------------- |
| `&&`          | ET logique            | Les deux conditions doivent être remplies | `if(cond1 == test && cond2 == test)`                      | 
| \`         |                       | \`                                         | OU logique            | 
| `<`          | Inférieur à           | X est inférieur à Y                       | `if(X < Y)`                      | 
| `>`          | Supérieur à           | X est supérieur à Y                       | `if(X > Y)`                      | 
| `<=`          | Inférieur ou égal à   | X est inférieur/égal à Y                  | `if(X <= Y)`                      | 
| `>=`          | Supérieur ou égal à   | X est supérieur/égal à Y                  | `if(X >= Y)`                      | 
| `==`          | Egal à                | X est égal à Y                            | `if(X == Y)`                      | 
| `!=`          | N'est pas égal à      | X n'est pas égal à Y                      | `if(X != Y)`                      | 

## Boucles

R est très performant dans l'exécution de tâches répétitives.
Si nous voulons qu'un ensemble d'opérations soit répété plusieurs fois, nous utilisons ce que l'on appelle une boucle.
Lorsque vous créez une boucle, R exécute les instructions qu'elle contient un certain nombre de fois ou jusqu'à ce qu'une condition donnée soit remplie.
Il existe trois principaux types de boucles dans R : la boucle *for* la boucle *while* et la boucle *répéter* boucle.

Les boucles sont l'un des éléments de base de tous les langages de programmation, et pas seulement de R, et peuvent être un outil puissant (bien qu'à notre avis, elles soient utilisées beaucoup trop souvent lors de l'écriture de code R).

### Boucle For

La structure de boucle la plus couramment utilisée lorsque vous souhaitez répéter une tâche un nombre défini de fois est la boucle `for` boucle.
L'exemple le plus simple de boucle `for` est le suivant :

```{r}
#| label: basic_for_loop
for (i in 1:5) {
  print(i)
}
```

Mais que fait réellement le code ? Il s'agit d'un morceau de code dynamique où un index `i` est remplacé itérativement par chaque valeur du vecteur `1:5`.
Décomposons.
Parce que la première valeur de notre séquence (`1:5`) est `1` la boucle commence par remplacer `i` par `1` et exécute tout ce qui se trouve entre le `{ }`.
Les boucles utilisent conventionnellement `i` comme compteur, abréviation d'itération, mais vous êtes libre d'utiliser ce que vous voulez, même le nom de votre animal de compagnie, cela n'a pas vraiment d'importance (sauf lorsque vous utilisez des boucles imbriquées, auquel cas les compteurs doivent être appelés différemment, comme `SenorWhiskers` et `HerrFlufferkins`).

Ainsi, si nous devions effectuer manuellement la première itération de la boucle

```{r}
#| label: manual_loop
i <- 1
print(i)
```

Une fois cette première itération terminée, la boucle for *boucle* revient au début et remplace `i` par la valeur suivante dans notre `1:5` séquence (`2` dans ce cas) :

```{r}
#| label: manual_loop_2
i <- 2
print(i)
```

Ce processus est ensuite répété jusqu'à ce que la boucle atteigne la dernière valeur de la séquence (`5` dans cet exemple), après quoi elle s'arrête.

Pour renforcer la façon dont les `for` et vous présenter une caractéristique importante des boucles, nous allons modifier notre compteur à l'intérieur de la boucle.
Cela peut être utilisé, par exemple, si nous utilisons une boucle pour parcourir un vecteur mais que nous voulons sélectionner la ligne suivante (ou toute autre valeur).
Pour ce faire, nous ajouterons simplement 1 à la valeur de notre index à chaque fois que nous itérons notre boucle.

```{r}
#| label: altering_i
for (i in 1:5) {
  print(i + 1)
}
```

Comme dans la boucle précédente, la première valeur de notre séquence est 1.
La boucle commence par remplacer `i` par `1` mais cette fois, nous avons spécifié qu'une valeur de `1` doit être ajoutée à `i` dans l'expression résultant en une valeur de `1 + 1`.

```{r}
#| label: altering_i_1
i <- 1
i + 1
```

Comme précédemment, une fois l'itération terminée, la boucle passe à la valeur suivante de la séquence et remplace `i` par la valeur suivante (`2` dans ce cas), de sorte que `i + 1` devient `2 + 1`.

```{r}
#| label: altering_i_2
i <- 2
i + 1
```

Et ainsi de suite.
Nous pensons que vous comprenez l'idée ! En fait, il s'agit d'une `for` et rien d'autre.

Bien que nous ayons utilisé une simple addition dans le corps de la boucle, vous pouvez également combiner des boucles avec des fonctions.

Revenons à notre cadre de données `dishes`.
Précédemment dans le chapitre, nous avons créé une fonction pour multiplier deux colonnes et l'avons utilisée pour créer notre `lasagna_stovies`, `stovies_poutine`, et `poutine_tartiflette` objets.
Nous aurions pu utiliser une boucle pour cela.
Rappelons-nous à quoi ressemblent nos données et le code de la fonction `multiple_columns()` fonction.

```{r}
#| label: dishes-data
```

```{r}
#| label: mult-example
```

Pour utiliser une liste afin d'itérer sur ces colonnes, nous devons d'abord créer une liste vide (vous vous souvenez de @sec-lists ?) que nous appelons `temp` (abréviation de temporary) qui sera utilisée pour stocker les résultats de la fonction `for` boucle.

```{r}
#| label: loop_function

temp <- list()
for (i in 1:(ncol(dishes) - 1)) {
  temp[[i]] <- multiply_cols(dishes, x = colnames(dishes)[i], y = colnames(dishes)[i + 1])
}
```

Lorsque nous spécifions notre `for` remarquez que nous avons soustrait 1 de `ncol(dishes)`.
La boucle `ncol()` renvoie le nombre de colonnes dans notre `dishes` cadre de données qui est `4` et donc notre boucle s'exécute de `i = 1` à `i = 4 - 1` qui est `i = 3`.

Ainsi, lors de la première itération de la boucle `i` prend la valeur `1`.
Les `multiply_cols()` multiplie le `dishes[, 1]` (`lasagna`) et `dishes[, 1 + 1]` (`stovies`) et le stocke dans la colonne `temp[[1]]` qui est le premier élément de la colonne `temp` liste.

La deuxième itération de la boucle `i` prend la valeur `2`.
Les `multiply_cols()` multiplie le `dishes[, 2]` (`stovies`) et `dishes[, 2 + 1]` (`poutine`) et le stocke dans la colonne `temp[[2]]` qui est le deuxième élément de la colonne `temp` liste.

La troisième et dernière itération de la boucle `i` prend la valeur `3`.
Les `multiply_cols()` multiplie le `dishes[, 3]` (`poutine`) et `dishes[, 3 + 1]` (`tartiflette`) et le stocke dans la colonne `temp[[3]]` qui est le troisième élément de la colonne `temp` liste.

Encore une fois, il est bon de vérifier que nous obtenons quelque chose de sensé de notre boucle (rappelez-vous, vérifiez, vérifiez et vérifiez encore !).
Pour ce faire, nous pouvons utiliser la fonction `identical()` pour comparer les variables que nous avons créées `by hand` à chaque itération de la boucle manuellement.

```{r}
#| label: compare_3_methods
lasagna_stovies_func <- multiply_cols(dishes, lasagna, stovies)
i <- 1
identical(
  multiply_cols(dishes, colnames(dishes)[i], colnames(dishes)[i + 1]),
  lasagna_stovies_func
)

stovies_poutine_func <- multiply_cols(dishes, stovies, poutine)
i <- 2
identical(
  multiply_cols(dishes, colnames(dishes)[i], colnames(dishes)[i + 1]),
  stovies_poutine_func
)
```

Si vous pouvez suivre les exemples ci-dessus, vous serez en bonne position pour commencer à écrire vos propres boucles for.
Cela dit, il existe d'autres types de boucles.

### Boucle While

Un autre type de boucle que vous pouvez utiliser (bien que moins fréquemment) est la boucle `while` boucle.
La boucle `while` est utilisée lorsque vous voulez continuer à tourner en boucle jusqu'à ce qu'une condition logique spécifique soit remplie (à comparer avec la boucle `for` qui parcourt toujours une séquence entière).

La structure de base de la boucle while est la suivante

```{r}
#| eval: false
while (logical_condition) {
  expression
}
```

Un exemple simple de boucle while est le suivant :

```{r}
i <- 0
while (i <= 4) {
  i <- i + 1
  print(i)
}
```

Ici, la boucle continuera uniquement à transmettre des valeurs au corps principal de la boucle (l'élément `expression` corps) que lorsque `i` est inférieur ou égal à 4 (spécifié à l'aide de l'attribut `<=` dans cet exemple).
Une fois que `i` est supérieur à 4, la boucle s'arrête.

Il existe un autre type de boucle, très rarement utilisé : la boucle `repeat` boucle.
La boucle `repeat` n'a pas de contrôle conditionnel et peut donc continuer à itérer indéfiniment (ce qui signifie qu'une pause, ou "stop here", doit être codée dans la boucle).
Cela vaut la peine d'être conscient de son existence, mais pour l'instant nous ne pensons pas qu'il faille s'en préoccuper ; la fonction `for` et `while` vous permettront de répondre à la plupart de vos besoins en matière de boucles.

### Quand utiliser une boucle ?

Les boucles sont assez couramment utilisées, bien que parfois un peu trop à notre avis.
Des tâches équivalentes peuvent être effectuées avec des fonctions, qui sont souvent plus efficaces que les boucles.
La question se pose donc de savoir quand il faut utiliser une boucle.

En général, les boucles sont implémentées de manière inefficace dans R et doivent être évitées lorsque de meilleures alternatives existent, en particulier lorsque vous travaillez avec de grands ensembles de données.
Cependant, les boucles sont parfois le seul moyen d'obtenir le résultat souhaité.

**Voici quelques exemples de cas où l'utilisation de boucles peut s'avérer appropriée :**

- Certaines simulations (par exemple
  le modèle de Ricker peut, en partie, être construit à l'aide de boucles)

- Relations récursives (une relation qui dépend de la valeur de la relation précédente) ["pour comprendre la récursivité, il faut comprendre la récursivité".] )

- Problèmes plus complexes (par exemple, depuis combien de temps le dernier blaireau a-t-il été vu sur le site ? $j$ étant donné qu'une martre des pins a été vue à l'heure $t$ au même endroit $j$ que le blaireau, lorsque la martre a été détectée au cours d'une période spécifique de 6 heures, mais excluant les blaireaux vus 30 minutes avant l'arrivée de la martre, répétée pour toutes les détections de martres)

- Boucles While (continuez à sauter jusqu'à ce que vous ayez atteint la lune)

### Si ce ne sont pas des boucles, alors quoi ?

En bref, utilisez la famille de fonctions apply ; `apply()`, `lapply()`, `tapply()`, `sapply()`, `vapply()` et `mapply()`.
Les fonctions apply peuvent souvent accomplir les tâches de la plupart des boucles "maison", parfois plus rapidement (bien que cela ne soit pas vraiment un problème pour la plupart des gens), mais surtout avec un risque d'erreur beaucoup plus faible.
Une stratégie à garder à l'esprit et qui peut s'avérer utile est la suivante : pour chaque boucle que vous faites, essayez de la refaire en utilisant une fonction apply (souvent `lapply` ou `sapply` fonctionneront).
Si vous le pouvez, utilisez la version applicable.
Il n'y a rien de pire que de se rendre compte qu'il y avait une petite, minuscule, erreur apparemment insignifiante dans une boucle qui, des semaines, des mois ou des années plus tard, s'est propagée dans un énorme gâchis.
Nous recommandons vivement d'essayer d'utiliser les fonctions apply chaque fois que cela est possible.

#### lapply {-}

Votre fonction d'application sera souvent `lapply()` du moins au début.
La façon dont les `lapply()` et la raison pour laquelle il constitue souvent une bonne alternative aux boucles for, est qu'il passe en revue chaque élément d'une liste et effectue une tâche (*c'est-à-dire* exécuter une fonction).
Il présente l'avantage supplémentaire de produire les résultats sous forme de liste, ce que vous devriez autrement coder vous-même dans une boucle.

Une fonction `lapply()` a la structure suivante :

```r
lapply(X, FUN)
```

Ici `X` est le vecteur que nous voulons faire *quelque chose* quelque chose.
`FUN` Les stands de l'association sont très amusants (je plaisante !).
C'est aussi l'abréviation de "fonction".

Commençons par une démonstration simple.
Utilisons la fonction `lapply()` pour créer une séquence de 1 à 5 et ajouter 1 à chaque observation (comme nous l'avons fait lorsque nous avons utilisé une boucle for) :

```{r}
lapply(0:4, function(a) {
  a + 1
})
```

Remarquez que nous devons spécifier notre séquence en tant que `0:4` pour obtenir la sortie `1 ,2 ,3 ,4 , 5` puisque nous ajoutons `1` à chaque élément de la séquence.
Voyez ce qui se passe si vous utilisez `1:5` à la place.

De manière équivalente, nous aurions pu définir la fonction d'abord, puis l'utiliser dans `lapply()`

```{r}
add_fun <- function(a) {
  a + 1
}
lapply(0:4, add_fun)
```

Les `sapply()` fait la même chose que `lapply()` mais au lieu de stocker les résultats sous forme de liste, elle les stocke sous forme de vecteur.

```{r}
sapply(0:4, function(a) {
  a + 1
})
```

Comme vous pouvez le voir, dans les deux cas, nous obtenons exactement les mêmes résultats que lorsque nous avons utilisé la boucle for.

```{r}
#| label: links
#| child: images/_links.md
```


